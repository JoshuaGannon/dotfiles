
# üß∞ Dotfiles Bootstrap Guide (Bare Repo Method)

This guide walks you through a **clean, repeatable setup** for managing and syncing your dotfiles across machines using Git's **bare repository** method. Ideal for `.bashrc`, `.gitconfig`, `nvim`, etc.

---

## ‚úÖ What This Does

- Keeps your dotfiles in-place (no symlinks or moving needed)
- Lets you track and sync only the files you explicitly add
- Supports easy pull/push between machines via Git
- Includes built-in backup for existing config files

---

## üöÄ 1. Authoritative Machine Setup (Laptop)

### üõ†Ô∏è One-Time Setup

```bash
# Create bare Git repo
git init --bare $HOME/.dotfiles

# Add dotfiles alias to shell
echo "alias dotfiles='git --git-dir=\$HOME/.dotfiles/ --work-tree=\$HOME'" >> ~/.bashrc
source ~/.bashrc

# Prevent untracked file noise
dotfiles config --local status.showUntrackedFiles no

```

### üéØ Start Tracking Dotfiles

```bash
# Track only what you care about

dotfiles add .bashrc
dotfiles add .gitconfig
dotfiles add .config/nvim

# Commit and push to GitHub

dotfiles commit -m "Initial dotfiles commit"
dotfiles remote add origin https://github.com/JoshuaGannon/dotfiles.git
dotfiles push -u origin master  # or main if your repo uses it

```

---

## üß≥ 2. Clone to New Machine

### ‚ö†Ô∏è Pre-Check: Backup Local Dotfiles

```bash
mkdir -p ~/.dotfiles-backup
mv ~/.bashrc ~/.dotfiles-backup/ 2>/dev/null
mv ~/.gitconfig ~/.dotfiles-backup/ 2>/dev/null
mv ~/.vimrc ~/.dotfiles-backup/ 2>/dev/null
mv ~/.config/nvim ~/.dotfiles-backup/nvim 2>/dev/null
```

### üîÅ Clone + Checkout

```bash
git clone --bare https://github.com/JoshuaGannon/dotfiles.git $HOME/.dotfiles

# Alias setup
echo "alias dotfiles='git --git-dir=\$HOME/.dotfiles/ --work-tree=\$HOME'" >> ~/.bashrc
source ~/.bashrc

# Checkout tracked files
dotfiles checkout

# Clean up status output
dotfiles config --local status.showUntrackedFiles no
```

---

## üìÇ 3. Project Structure Example

```
~/.dotfiles         # bare repo, not tracked by itself
~/.bashrc           # tracked in Git
~/.gitconfig        # tracked in Git
~/.config/nvim      # tracked recursively
~/BOOTSTRAPPER/     # stores your bootstrap-dotfiles.sh
```

---

## üìú bootstrap-dotfiles.sh (Optional Script)

```bash
#!/bin/bash

DOTFILES_REPO="https://github.com/JoshuaGannon/dotfiles.git"
GIT_DIR="$HOME/.dotfiles"
WORK_TREE="$HOME"

# Backup existing dotfiles
mkdir -p $HOME/.dotfiles-backup
mv $HOME/.bashrc $HOME/.dotfiles-backup/ 2>/dev/null
mv $HOME/.gitconfig $HOME/.dotfiles-backup/ 2>/dev/null
mv $HOME/.vimrc $HOME/.dotfiles-backup/ 2>/dev/null
mv $HOME/.config/nvim $HOME/.dotfiles-backup/nvim 2>/dev/null

# Clone bare repo
git clone --bare "$DOTFILES_REPO" "$GIT_DIR"

# Setup alias
echo "alias dotfiles='git --git-dir=\$HOME/.dotfiles/ --work-tree=\$HOME'" >> $HOME/.bashrc
source $HOME/.bashrc

# Checkout
if dotfiles checkout; then
    echo "‚úÖ Dotfiles checked out."
else
    echo "‚ö†Ô∏è Conflicts occurred. Check ~/.dotfiles-backup."
fi

# Suppress untracked clutter
dotfiles config --local status.showUntrackedFiles no
```

---

## ‚úÖ Daily Use

```bash
dotfiles status         # View tracked file changes
dotfiles add .bashrc    # Stage a tracked file
dotfiles commit -m "..."
dotfiles push           # Sync to GitHub
dotfiles pull           # Sync from GitHub
```

---

## üß† Best Practices

- Only `add` files you want to sync
- Use `dotfiles restore <file>` to discard local changes
- Use `~/.dotfiles-backup/` to restore old configs if needed
- Keep `bootstrap-dotfiles.sh` inside a BOOTSTRAPPER/ folder for future setups

---

Let me know if you want a `bootstrap-dev.sh` that installs Git, Neovim, fzf, etc. beforGit, Neovim, fze pulling dotfiles!



\`
